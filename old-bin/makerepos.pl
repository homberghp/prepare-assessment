#!/usr/bin/perl -w
# $Id: makerepos.pl 246 2010-06-16 13:15:34Z hom $
# @author p.vandenhombergh@fontys.nl
use strict;
use diagnostics;
use warnings;
use Config::Properties;
use File::Path qw(make_path remove_tree);
use File::Basename;
use POSIX qw(floor);
use POSIX qw(locale_h);
use Cwd;
setlocale(LC_ALL,'en_US.UTF-8');
my $workdir= getcwd;
my $STYPE='EXAM';
my $stype=lc $STYPE;
if ($workdir !~ m/.*(\d{4})(\d{2})(\d{2}).?$/) {
  die qq(The current directory name does not conform the convention (ISO 8601 8 digit date format).\nPlease correct\n);
}
my  $defexam_date ="$1-$2-$3";
# read properties from parent dir , if available.
my $defproperties = new Config::Properties();

if ( -f '../default.properties') {

  open PROPS, "<../default.properties" or die "unable to open ../default.properties file\n";
  $defproperties->load(*PROPS);
  close(PROPS);
}
my $properties = new Config::Properties(defaults=>$defproperties);

if ( -f 'setup.properties') {
  open PROPS, "<setup.properties" or die "unable to open setup.properties file\n";
  $properties->load(*PROPS);
  close(PROPS);
}

my ($reposdir,$reposuri,$projname,$uname,$salt,$fromdir,$nbprojectxml,$reposurilocal);
my $scriptdir = dirname($0);

## debug: show loaded properties
my %props=$properties->properties;
print STDERR "properties used\n";
foreach my $k (sort keys %props) {
  print STDERR "\t$k => \033[1;32m$props{$k}\033[m\n";
}

# remove old stuff
remove_tree('./paconfig');
make_path('./paconfig');

open PHP_INPUT,">./paconfig/svn_repos.txt" or die "unable to open php input file\n";

my $module_name =$properties->getProperty('module_name','SEN1');
# derive exam date from dir name.

my $examcount=$properties->getProperty('candidate_count',2);
my $stick_id = $properties->getProperty('stick_id',100);
my $exam_date = $properties->getProperty('exam_date',$defexam_date);
my $exam_year = substr($exam_date,0,4);
my $svn_location= $properties->getProperty('svn_location',"/home/${stype}");
my $exam_name = "Performance assessment ${module_name} ${exam_date}";
my $exam_id = $module_name.'-'.$exam_date;
my $app_name = $properties->getProperty('app_name','xxx slot machine');
my $exam_web_dir="/home/examdoc/public_html/${exam_year}/${exam_id}";
my $tutors    = $properties->getProperty('tutors','hom,ode,hee,hvd');
my $local_repos_path=$svn_location.'/'.$exam_id;
my $allowed_from = $properties->getProperty('allowed_from','');
my $extension= $properties->getProperty('extension','c');
$allowed_from =~ s/"//g;
my $noaccess_url = $properties->getProperty('noaccess_url','http://osirix.fontysvenlo.org/noaccess.html');
my $isNetbeansProject = $properties->getProperty('is_netbeans_project',0);
my $resources_dir='/home/prepareassessment/resources';
my $validate_project=$properties->getProperty('validate_project',1);
my $repolist;
my ($sticknr,$projdir);
# if ( $isNetbeansProject != 0 &&  ! -f './project.xml_template' ) {
#   die "\033[41mNeed project.xml_template with examproject dir to populate netbeans project in repos\033[m\n";
# }

if (! -d './examproject' ) {
  die "Missing exam project directory './examproject' . cannot continue \n";
}
if (! -d './examsolution' ) {
  die "Missing exam solution directory './examsolution' . cannot continue \n";
}
print qq(extension='$extension'\n);
if ($extension eq 'java') {
  symlink ($scriptdir.'/transform_java', 'transform');
} elsif ($extension eq 'sql') {
  symlink ($scriptdir.'/transform_sql', 'transform');
} elsif ($extension eq 'R') {
  symlink ($scriptdir.'/transform_r', 'transform');
} elsif ($extension eq 'odt') {
  symlink ($scriptdir.'/transform_sql', 'transform');
} elsif ($extension eq 'C') {
  symlink ($scriptdir.'/transform_java', 'transform');
} else {
  die "do not yet understand extension $extension\n";
}

# validate if requested. validateProject is an external script.
if ($validate_project) { 
    system ('validateProject') == 0 
	or die "\033[01;41;37mproject not suited for show time, aborting\033[K\033[0m \n\n";
}

my $event=$exam_id;
$event =~ s/-//g;
my $sortdate=$exam_date;
$sortdate =~ s/-//g;
my $repos_parent=$local_repos_path.'/svnroot';
my $simpledate=$exam_date;
$simpledate =~ s/-//g;
my $authz_svn_file = $repos_parent.'/conf/authz';
my $site_url=qq(https://osirix.fontysvenlo.org/examdoc/$exam_year/$exam_id/index.php);


# start the script output
print qq(#!/bin/bash
# This file is autogenerated from exam data
# Do not edit.
# set env, encoding
LANG=en_US.UTF-8
LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8
export LC_CTYPE LANG LC_ALL
umask 002
# Execute this script with root rights as in sudo bash <scriptname>
#
# remove stuff from previous run
## NOTE: cleanup yourselves, so we can build more exams in parallel
# rm -fr /home/${stype}/${STYPE}*-repo
# rm -fr /home/${stype}/Desktop/examproject-${STYPE}*
# start with repos
#svnadmin create $repos_parent
#cp ${resources_dir}/repos-templates/hooks/post-commit ${repos_parent}/hooks
#chmod a+rx ${repos_parent}/hooks/post-commit
);
print qq(echo in the next few seconds the script creates all repositories using all server cores, so be please be patient.\n);
$repolist='';
my $stickcount=0;
while ($stickcount < $examcount) {
  $sticknr = $stick_id+$stickcount;
  $uname = $STYPE.$sticknr;
  $fromdir=$local_repos_path.'/tmp/'.$uname;
  $projname=$module_name.'_'.$simpledate.'_'.$uname;
  $projname =~ s/ /_/g;
  $reposdir=qq(/home/${stype}/${uname}-repo);
  $reposurilocal='file://'.$reposdir;
  $reposuri = '/examsvn/'.$exam_id.'/'.$uname;
  $projdir=qq(/home/${stype}/Desktop/examproject-${uname}/);		#.'/'.$projname;
  $nbprojectxml=$projdir.'/nbproject/project.xml';
  $repolist .= qq($reposurilocal\n);
  print qq(\t\(\n\t\tmkdir -p $projdir\n);
  #  dir to dir copy; target created  by cp
  if ( -d  'examproject' ) {
    print "\t\tcp -r -L examproject/* $projdir\n";
    if ( $isNetbeansProject  ) {
      print qq(\t\tfor i in \$\(find examproject -name project.xml\); do 
		  sed -re "s\@<name>(.*)?</name>\@<name>\\1-$uname</name>\@"  \$\{i\} > $projdir\$\{i/examproject\}
                  done
              );
      print "## maven project\n";
      print qq(\t\tfor i in \$\(find examproject -name pom.xml\); do 
		  sed -re "s\@<name>(.*)?</name>\@<name>\\1-$uname</name>\@"  \$\{i\} > $projdir\$\{i/examproject\}
                  done
              );
    }
    if ( -x './transform' ) {
      print qq(./transform $projdir __STUDENT_ID__ '($uname)'\n);
    }
  }
  print qq(\t\tsvnadmin create  $reposdir
    \t\tsvn import -q -m'initial repos struct and project' $projdir $reposurilocal
    \t\trm -fr $projdir
    \t\tsvn co $reposurilocal $projdir
    \t\)&\n);
  print PHP_INPUT qq($uname;$reposdir\n);
  $stickcount++;
}
# process questions by filtering by tag.
print qq(# wait for svn import childs to complete
wait
# all owned by exam user
chown -R exam:exam /home/exam
echo created all repos
echo -e"\t"            '$repolist'
);

