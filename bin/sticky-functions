#!/bin/bash


## Set of functions to manipulate sticks for exam image preparation.
##
## @author pieter.van.den.hombergh@gmail.com


## Get device name by reading vendor and model from /sys/bloc pseudo file system.
## @param diskBaseName name of device like sdd or sde
function blockDeviceName(){
    local diskBaseName=$1; shift
    if [ -z "$diskBaseName" ]; then 
        echo "paramater not set"
    fi
    v=$(cat /sys/block/${diskBaseName}/device/vendor); v=${v// /} # trim spaces
    m=$(cat /sys/block/${diskBaseName}/device/model); m=${m// /} # trim spaces
    echo "$v $m"
}

## 
## test if given stick reports as 'SanDisk Extreme'
## @param diskBaseName like sdc
function isSanDiskUSB(){
    local diskBaseName=$1; shift
    local vm=$(blockDeviceName "${diskBaseName}")
    [[ $vm =~ ^'SanDisk Extreme' ]]
}

## Return a list of device names that appear to be SanDisk Extreme devices
## 
function enumerateSticks(){
    local result=''
    local stick
    for stick in /sys/block/sd*; do
        local diskBaseName=$(basename ${stick})
        if isSanDiskUSB "${diskBaseName}"; then
            result="${result} ${diskBaseName}"
        fi
    done
    echo -n ${result};
}

## Validates that the device visible as diskBaseName is indeed
## a 'SanDisk Extreme' make and model.
# @param diskBaseName like sdc
# @deprecated:  when running this in a shell, and the stick is not valid, it closes the shell.
function validateStick(){
    local diskBaseName=$1; shift
    echo "checking '${diskBaseName}' to be proper stick"
    if [ ! -d /sys/block/${diskBaseName} ] ; then 
        echo "${diskBaseName} is not a suitable device or not a block device at all, bye..."
        exit 1
    fi
    ## test for SanDisk Extreme
    ## read vendor and model
    dname=$(blockDeviceName ${diskBaseName})
    if  ! isSanDiskUSB ${diskBaseName} ; then
        echo "device /dev/${diskBaseName} should be a 'SanDisk Extreme' but was a '${dname}'"
        exit 1
    fi
    #echo "found device '$vm' at /dev/${diskBaseName}"
}

## Mount all sticks that report the proper vendor and model
## @post-condition: all sticks have their writable partition 3 mounted

function mountAllSticks(){
    local counter=0
    local probes=""
    for baseDisk in $(enumerateSticks); do
        if [ -z "${baseDisk}" ]; then continue; fi
        counter=$((${counter}+1))
        local probemount=/media/${USER}/${baseDisk}3-stickmountprobe
        local part=${baseDisk}3
        mkdir -p ${probemount}
        probes="${probes} ${probemount}"
        if mount --options ro /dev/${part} ${probemount}; then
            local labelFile=${probemount}/upper/sebi-label
            if [ -s ${labelFile} ]; then
                label=$(cat ${labelFile})
            else
                label=UNKNOWN${counter}
            fi
            ## create final mount point
            local finalmount=/media/usb/${label}-writable
            ( # run detached
                mkdir -p ${finalmount}
                mount --bind ${probemount} ${finalmount}
                mount --options remount,rw /dev/${part} ${finalmount}
                sync
                # wait for succesful umount 
                while ! umount ${probemount} 2> /dev/null ; do 
                    sleep 0.5; 
                done
                rmdir ${probemount}
                echo "mounted and rebound /dev/${part} ${finalmount}"
            ) &
        else
            echo -e "can't mount '/dev/${part}' to ${probemount}"
        fi
    done
    # echo "wait for child processes to complete"
    wait 
}


# Enumerate  mounted stick partitions
# @return the space separated list of mounted partitions
function mountedPartitions(){
    local mounted=""
    for d in $(enumerateSticks); do
        for p in $(cat  /proc/mounts \
                | awk '{print $1}'\
                | grep -s "/dev/${d}" ) ; do
            if [ -z "$mounted" ]; then
                mounted="$p"
            else
                mounted="${mounted} $p"
            fi
        done
    done
    echo -n "$mounted"
}

## Find all the mount points for the given device
## @param dev device as in sdd3 or sdde3
## return a space sperated mountpoints
function mountPointsFor(){
    local dev=$1; shift
    local mountPoints=""
    for p in $(cat  /proc/mounts | grep -s "^${dev}" | awk '{print $2}' ) ; do
        mountPoints="${mountPoints} $p"
    done
    echo -n "${mountPoints}"
}

## unmount all stick partitions. Remove all directories under /media/usb/*
## @post all sticks are umounted
function umountAllSticks(){
    local part
    local mp
    for part in $(mountedPartitions) ; do
        for mp in $(mountPointsFor ${part} ); do
        ## build for-loop until success 
            while ! umount -q ${mp} 2> /dev/null; do
                echo "cannot umount ${mp}"
                sleep 0.5
            done
            rmdir ${mp}
        done
    done
    ## cleanup dangling mount points
    for m in $(find /media/usb -mindepth 1 -maxdepth 1 -type d ); do
        rmdir ${m}
    done
    for m in $(find /media/${USER} -mindepth 1 -maxdepth 1 -type d ); do
        rmdir ${m}
    done
}


## Make a lock file for sfdisk and one for mkfs.ext2
function makeLockFiles(){
    mkdir -p /var/lock/sticky-locks/
    touch /var/lock/sticky-locks/sd{d..z}
}

## remove lock files, disable, rewriting causes more disk wear
function removeLockFiles(){
    echo "no need to rm -fr /var/lock/sticky-locks"
}

## append partition 3 to current partition on stick
## @param stick. 
## Not that this command is actuall invoked via external file 'append-partition-3', otherwise flock can't find it
function appendPartition3(){
    local stick=$1; shift
    echo "creating 3rd partition in /dev/${stick}"
     echo "," | flock --exclusive /var/lock/sticky-locks/${stick} sfdisk  --quiet --append /dev/${stick} -N3 2> /dev/null
    ## make sure the kernel sees the new partition
    sync /dev/${stick}
    sleep 1
    partprobe /dev/${dev} > /dev/null 2>&1
}

## wait for block device to be visible
## @param block device like /dev/sdd3
function waitForBlockDevice(){
    local dev=$1; shift
    local countDown=200
    partprobe ${dev} > /dev/null 2>&1
    while [[ ${countDown} -gt 0 ]]; do
        if test -b ${dev} ; then return 0; fi
        echo "waiting for block device ${dev} to  become visible, countDown =${countDown}"
        sleep 0.5
        partprobe ${dev} > /dev/null 2>&1
        countDown=$((${countDown}-1))
    done
    # last check returns result, 0 on success, other on fail
    return 1
}

##
## Make partition 3 on stick and leaves it unmounted
## @param stick/ stick to use
## returns status, 0 on succes , 1 on fail
function initPartition3(){
    local stick=$1; shift
    local label=$1; shift
    if isSanDiskUSB "${stick}" ; then
        ## I do not trust sfdisk to be 'thread-safe' so have only one process use it
        appendPartition3 ${stick}
        waitForBlockDevice /dev/${stick}3
        ## make a file system in the partition
        ## not sure if mkfs.ext2 is thread safe, so serialize that too.
        flock --exclusive /var/lock/sticky-locks/${stick} mkfs.ext2 -q -F -L writable /dev/${stick}3 > /dev/null
        ## make sure the file system actions are flushed to the device after short pause
        sleep 1
        sync /dev/${stick}3 /dev/${stick}
        echo "created file system in partition /dev/${stick}3 for ${label}"
    else
        return 1
    fi
}

##
## Prime a partition sdX3 with label and initial home directories.
## @param stick partition to prime
## @param label to use. 
function primePartition3(){
    local stick=$1; shift
    local label=$1; shift
    local part="/dev/${stick}3"
    ## make the partition  and create file system in partition3
    if initPartition3 ${stick} ${label}; then
        ## make sure the partition info is up to date
        partprobe /dev/${stick}
        local rootmp=/media/usb/${label}-writable
        mkdir -p ${rootmp}
        local tryCount=10
        waitForBlockDevice ${part}
        # try to find the pristine lost+found dir in the new partition,
        # but give up after so many tries
        mount ${part} ${rootmp}
        
        while [[ ${tryCount} -gt 0 ]] ; do
            if test -d ${rootmp}/lost+found ; then 
                break; 
            fi
            echo "count down mount try count ${tryCount}"
            mount ${part} ${rootmp}
            tryCount=$((${tryCount}-1))
            sleep 0.5
        done
        if test -d ${rootmp}/lost+found ; then
            ## create a default directory structure
            mkdir -p ${rootmp}/{upper/etc,work/work}
            ## put the label file in sebi-label and hostname
            echo ${label} | tr 'A-Z' 'a-z' > ${rootmp}/upper/etc/hostname
            echo -n ${label} > ${rootmp}/upper/sebi-label
            ## expand skel for home/exam
            if [ -e examskel.tgz ]; then
                userhome=${rootmp}/upper/home/exam
                mkdir -p ${userhome}
                tar -C ${userhome} -xf examskel.tgz
                chown -R 1001:1001 ${userhome}
                echo -e "created home dir for 'exam' on device ${stick}3 for \e[42m${label}\e[m"
            fi
            ## expand skel for home/sebi
            if [ -e sebiskel.tgz ]; then
                userhome=${rootmp}/upper/home/sebi
                mkdir -p ${userhome}
                tar -C ${userhome} -xf sebiskel.tgz
                chown -R 1002:1002 ${userhome}
                echo -e "created home dir for 'sebi' on device ${stick}3 for \e[42m${label}\e[m"
            fi
            sync ${part}
            sleep 1
            umount ${rootmp}
            return 0
        else
            echo -e "\e[41mCan't mount /dev/${stick}3 ${rootmp}\e[m, failed after ${tryCount} tries"
            return 1
        fi
    else
        echo -e "\e[421mUnsuccesful at priming partition 3 on /dev/${stick}, ${label} because creating partition +fs failed\e[m"
        return 2
    fi
}

## Mount the usb stick as /media/usb/<label>-writable
## as in /media/usb/EXAM350-writable
## @param old mount point 
## @param label
function remount(){
    local omp=$1; shift
    local label=$1; shift
    local nmp=/media/usb/${label}-writable
    mkdir -p ${nmp}
    mount --bind ${omp} ${nmp}
    umount ${omp}
}

##
## Prepare a set of stick with stick class, image and initial label number.
## example prepareSticks EXAM image.iso 350 sdc sdd sde sdf
## @param stick_class EXAM oe SEBI
## @param image the iso file to use
## @param startDiskNr the initial stick number
## @param disk1 [disk2 [...]]
function prepareSticks(){
    echo "received $# params: [$@]"
    local stick_class=$1; shift
    local image=$1; shift
    local startDiskNr=$1; shift
    # ensure no stick is mounted
    umountAllSticks
    ## we need lock files. will exit on failure.
    makeLockFiles
    while [ $# -gt 0 ]; do
        local stick=$1; shift
        if isSanDiskUSB "${stick}"; then 
            local label=${stick_class}${startDiskNr}
            echo "preparing stick ${stick} as ${label}"
            ## run as detached sub process
            (
                # for those cases where there is an GPT table
                #sgdisk --zap-all /dev/${stick}
                flock -x /dev/${stick} dd conv=fsync if=${image} of=/dev/${stick} bs=4M
                echo "#writing base iso to ${stick} for ${label} completed."
                ## dd rewrote partition table, inform system
                sync
                sleep 1
                partprobe /dev/${stick}
                primePartition3 ${stick} ${label}
                sleep 1
            ) &
            startDiskNr=$((${startDiskNr}+1))
        fi
    done
    echo "wait for completion of sub processes"
    wait
    removeLockFiles
    echo "all child processes returned"
    paplay --volume 24000 /usr/share/sounds/sound-icons/piano-3.wav
}
